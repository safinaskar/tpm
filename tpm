#!/bin/sh

# Не имеет права перезапускать себя, т. к. может быть запущен через, скажем, curl | sh. Нельзя использовать $0, кроме как для вывода сообщений об ошибках. Не может опираться даже на базовые предположения, которые считаются верными для всех остальных программ, устанавливаемых через tpm. Этот скрипт умеет работать с системами, находящимися в chroot-окружениях

# Предполагаем, что echo и exit есть

# Доступна внутренняя или внешняя команда
tpm_is_command(){
	type "$1" > /dev/null 2>&1
}

tpm_assert(){
	if ! "$@"; then
		echo "${0##*/}: $*: assertion failed" >&2
		exit 1
	fi
}

tpm_assert tpm_is_command type

# Теперь есть ещё и type. На всякий случай проверим echo и exit ещё раз:

tpm_assert tpm_is_command echo
tpm_assert tpm_is_command exit

# Проверим ещё вот эти, чтобы больше о них не думать:

tpm_assert tpm_is_command .
tpm_assert tpm_is_command :
tpm_assert tpm_is_command [

tpm_assert tpm_is_command break
tpm_assert tpm_is_command return
tpm_assert tpm_is_command continue
tpm_assert tpm_is_command trap
tpm_assert tpm_is_command read
tpm_assert tpm_is_command cd
tpm_assert tpm_is_command printf
tpm_assert tpm_is_command shift
tpm_assert tpm_is_command eval

tpm_assert tpm_is_command rm
tpm_assert tpm_is_command mkdir
tpm_assert tpm_is_command rmdir
tpm_assert tpm_is_command cat
tpm_assert tpm_is_command cp

# Теперь начало основного скрипта

tpm_assert tpm_is_command set

set -e

tpm_anz(){
	[ -z "$1" ] && echo "${0##*/}: argument is empty" >&2 && exit 1
	printf '%s\n' "$1"
}

tpm_az(){
	[ -n "$1" ] && echo "${0##*/}: too many arguments" >&2 && exit 1
	:
}

tpm_abool(){
	case "$1" in
		true|false)
			printf '%s\n' "$1"
			;;
		*)
			echo "${0##*/}: boolean argument is not true and is not false" >&2
			exit 1
			;;
	esac
	:
}

tpm_unz(){
	[ -z "$1" ] && usage
	printf '%s\n' "$1"
}

tpm_uz(){
	[ -n "$1" ] && usage
	:
}

tpm_ueq(){
	[ "$1" != "$2" ] && usage
	:
}

tpm_is_not(){
	! "$@"
}

tpm_mktemp_directory(){
	TEMPLATE="${1:-/tmp/tpm-XXXXXX}"
	tpm_az "$2"

	tpm_assert tpm_is_command mktemp

	while :; do
		RESULT="$(mktemp "$TEMPLATE")"
		rm "$RESULT"
		if mkdir -m 700 "$RESULT" 2> /dev/null; then
			break
		fi
	done

	printf '%s\n' "$RESULT"
}

TARGET=/bad-target # На всякий случай

# Вызывать только в ситуации, когда мы уверены, что пакет не установлен
_target_install_debian_package(){
	PACKAGE="$(tpm_anz "$1")"
	tpm_az "$2"

	tpm_assert tpm_is_root

	tpm_assert tpm_is_command chroot

	if ! _is_target_command apt-get; then
		echo "${0##*/}: $PACKAGE: package seems to be not installed and we have no apt-get to install it" >&2
		exit 1
	fi

	# Будем считать, что наличие файла /var/lib/apt/lists/lock говорит о том, что как минимум один раз был выполнен apt-get update
	if ! [ -e "$TARGET/var/lib/apt/lists/lock" ]; then
		chroot "$TARGET" apt-get update
	fi

	# LC_ALL=C, т. к. если не установлены локали, то apt-get будет выдавать кучу сообщений об ошибках
	# Нужно писать именно -o Apt::Install-Recommends=false, а не --no-install-recommends, т. к. apt из sarge не понимает --no-install-recommends
	LC_ALL=C chroot "$TARGET" apt-get install -y -o Apt::Install-Recommends=false "$PACKAGE"
}

_target_install_prog_colon(){
	COMMAND="$(tpm_anz "$1")"
	PACKAGE="$(tpm_anz "$2")"
	tpm_az "$3"

	_is_target_command "$COMMAND" && return

	_target_install_debian_package "$PACKAGE"

	if ! _is_target_command "$COMMAND"; then
		echo "${0##*/}: мы только что установили debian-пакет $PACKAGE установлен, но команды $COMMAND всё равно нет" >&2
		exit 1
	fi
}

_force_prog_colon(){
	COMMAND="$(tpm_anz "$1")"
	PACKAGE="$(tpm_anz "$2")"
	tpm_az "$3"

	if ! tpm_is_command "$COMMAND"; then
		if [ "$TARGET" != / ]; then
			echo "${0##*/}: no $COMMAND and target is not /, so we will not install it" >&2
			exit 1
		fi

		_target_install_prog_colon "$COMMAND" "$PACKAGE"
	fi
}

tpm_is_wget_working(){
	tpm_az "$1"

	wget -O /dev/null https://github.com 2> /dev/null
}

_target_install_meta_wget(){
	tpm_az "$1"

	_target_install_prog_colon wget wget

	chroot "$TARGET" wget -O /dev/null https://github.com 2> /dev/null && return

	_target_install_debian_package ca-certificates

	if ! chroot "$TARGET" wget -O /dev/null https://github.com; then
		echo "${0##*/}: we just installed ca-certificates, but still cannot download https://github.com, possible reasons: no internet connection, DNS problems, https://github.com is down" >&2
		exit 1
	fi
}

_force_meta_wget(){
	tpm_az "$1"

	_force_prog_colon wget wget

	if ! wget -O /dev/null https://github.com 2> /dev/null; then
		if [ "$TARGET" != / ]; then
			wget -O /dev/null https://github.com
			echo "${0##*/}: cannot download https://github.com, possible reason: no certificates on the system, and target is not /, so we will not install the certificates" >&2
			exit 1
		fi

		_target_install_meta_wget
	fi
}

# Исключение из правила: должно работать корректно даже в if'е
tpm_download(){
	URL="$(tpm_anz "$1")"
	OUTPUT="$(tpm_anz "$2")"
	FORCE="$(tpm_abool "$3")"
	tpm_az "$4"

	tpm_assert tpm_is_command mktemp

	tpm_assert tpm_is_wget_working

	printf '%s' "Downloading $URL... "

	WGET_OUTPUT="$(mktemp /tmp/tpm-wget-output-XXXXXX)"

	(
		trap "rm '$WGET_OUTPUT'" EXIT

		if ! wget -O "$OUTPUT" "$URL" 2> "$WGET_OUTPUT"; then
			rm -f "$OUTPUT"
			if "$FORCE"; then
				printf 'failed\n'
				cat "$WGET_OUTPUT" >&2
			else
				printf 'failed, but this is OK\n'
			fi
			return 1
		fi

		printf 'done\n'
	)
}

_download(){
	URL="$(tpm_anz "$1")"
	OUTPUT="$(tpm_anz "$2")"
	tpm_az

	_force_meta_wget
	tpm_download "$URL" "$OUTPUT" true
}

tpm_is_root(){
	tpm_az "$1"

	tpm_assert tpm_is_command id

	[ "$(id -u)" = 0 ]
}

_is_target_db(){
	tpm_az "$1"

	[ -e "$TARGET/opt/tpm-store/var/lib/tpm/info" ]
}

_is_target_native_installed(){
	PACKAGE="$(tpm_anz "$1")"
	tpm_az "$2"

	[ -e "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE.list" ]
}

tpm_source(){
	SCRIPT="$(tpm_anz "$1")"
	tpm_az "$2"

	[ "${SCRIPT#/}" = "$SCRIPT" ] && . "$PWD/$SCRIPT" || . "$SCRIPT"
	:
}

_is_target_command(){
	COMMAND="$(tpm_anz "$1")"
	tpm_az "$2"

	tpm_assert tpm_is_command chroot

	chroot "$TARGET" sh -c "type '$COMMAND' > /dev/null 2>&1"
}

_target_read_config(){
	tpm_az "$1"

	tpm_source "$TARGET/opt/tpm-store/etc/tpm.conf"
}

_target_install_tarball(){
	CONTROL="$(tpm_anz "$1")"
	TARBALL="$(tpm_anz "$2")"
	tpm_az "$3"

	tpm_assert tpm_is_root

	tpm_assert tpm_is_command chroot

	_force_prog_colon tar tar
	_force_prog_colon gzip gzip
	_force_prog_colon sed sed

	tpm_assert _is_target_db

	tpm_source "$CONTROL"

	tpm_assert tpm_is_not _is_target_native_installed "$PACKAGE"

	for I in $DEPENDS; do
		_target_install_package "$I"
	done

	for I in $LIBS; do
		_target_install_package "lib:$I"
	done

	echo "Installing $PACKAGE"

	mkdir -p "$TARGET/opt/tpm-store/var/lib/tpm/info/${PACKAGE%/*}"

	TEMP="$(tpm_mktemp_directory)"

	(
		trap "rm -r '$TEMP'" EXIT

		( cd "$TARGET"; tar --numeric-owner -xzv ) < "$TARBALL" > "$TEMP/list"

		sed -e 's/^\.//' -e 's~^/$~/.~' -e 's~/$~~' "$TEMP/list" > "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE.list"

		# Делаем cat'ом, чтобы файл создался с нужными правами и владельцем
		cat "$CONTROL" > "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE.control"

		if _is_target_command ldd; then
			while IFS="" read -r FILE; do
				if ! [ -f "$TARGET$FILE" ]; then
					continue
				fi

				chroot "$TARGET" ldd "$FILE" > /dev/null 2> "$TEMP/ldd-error" || :

				if [ -s "$TEMP/ldd-error" ]; then
					cat "$TEMP/ldd-error"
					echo "${0##*/}: link errors, removing package back" >&2
					_target_remove_native "$PACKAGE"
					exit 1
				fi
			done < "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE.list"
		else
			echo "${0##*/}: warning: no ldd, cannot be sure everything is linked properly" >&2
		fi
	)
}

_target_install_package(){
		PACKAGE="$(tpm_anz "$1")"
		tpm_az "$2"

		tpm_assert tpm_is_root

		tpm_assert _is_target_db

		case "$PACKAGE" in
			prog:*)
				PACKAGE_SUFFIX="${PACKAGE#prog:}"
				COMMAND="${PACKAGE_SUFFIX%%:*}"
				DEBIAN_PACKAGE="${PACKAGE_SUFFIX#*:}"

				_target_install_prog_colon "$COMMAND" "$DEBIAN_PACKAGE"
				;;

			meta:wget)
				_target_install_meta_wget
				;;

			lib:*)
				PACKAGE_SUFFIX="${PACKAGE#lib:}"
				LIBRARY="${PACKAGE_SUFFIX%%:*}"
				PACKAGE_SUFFIX="${PACKAGE_SUFFIX#*:}"
				VERSION="${PACKAGE_SUFFIX%%:*}"

				_target_read_config

				check_library(){
					for I in "$TARGET/lib/$LIBRARY.so.$VERSION" "$TARGET/usr/lib/$LIBRARY.so.$VERSION" "$TARGET/lib/$SYSTEM_ARCH/$LIBRARY.so.$VERSION" "$TARGET/usr/lib/$SYSTEM_ARCH/$LIBRARY.so.$VERSION"; do
						if [ -e "$I" ]; then
							return 0
						fi
					done

					return 1
				}

				check_library && return

				_target_install_debian_package "$LIBRARY$VERSION"

				if ! check_library; then
					echo "${0##*/}: $PACKAGE: пакет установлен, но библиотеки всё равно нет" >&2
					exit 1
				fi
				;;

			libdev:*)
				PACKAGE_SUFFIX="${PACKAGE#libdev:}"
				LIBRARY="${PACKAGE_SUFFIX%%:*}"
				PACKAGE_SUFFIX="${PACKAGE_SUFFIX#*:}"
				VERSION="${PACKAGE_SUFFIX%%:*}"

				if [ "$VERSION" = "$PACKAGE_SUFFIX" ]; then
					DEBIAN_PACKAGE="$LIBRARY$VERSION-dev"
				else
					DEBIAN_PACKAGE="${PACKAGE_SUFFIX#*:}"
				fi

				check_library(){
					for I in "$TARGET/lib/$LIBRARY.so" "$TARGET/usr/lib/$LIBRARY.so" "$TARGET/lib/$SYSTEM_ARCH/$LIBRARY.so" "$TARGET/usr/lib/$SYSTEM_ARCH/$LIBRARY.so"; do
						if [ -e "$I" ]; then
							return 0
						fi
					done

					return 1
				}

				check_library && return

				_target_install_debian_package "$DEBIAN_PACKAGE"

				if ! check_library; then
					echo "${0##*/}: $PACKAGE: пакет установлен, но библиотеки всё равно нет" >&2
					exit 1
				fi
				;;

			*)
				_is_target_native_installed "$PACKAGE" && return

				_target_read_config

				TEMP="$(mktemp_directory)"

				(
					trap "rm -r '$TEMP'" EXIT

					_force_meta_wget

					tpm_download "https://github.com/$PACKAGE/raw/master/tpm-control" "$TEMP/tpm-control"

					if tpm_download "$REPO/$SYSTEM_ARCH/$PACKAGE.tar.gz" "$TEMP/package.tar.gz" false; then
						_target_install_tarball "$TEMP/tpm-control" "$TEMP/package.tar.gz"
					elif tpm_download "$REPO/all/$PACKAGE.tar.gz" "$TEMP/package.tar.gz" false; then
						_target_install_tarball "$TEMP/tpm-control" "$TEMP/package.tar.gz"
					else
						_force_prog_colon tar tar
						_force_prog_colon gzip gzip

						tpm_download "https://github.com/$PACKAGE/archive/master.tar.gz" "$TEMP/master.tar.gz" true

						( cd "$TEMP"; tar -xzf "$TEMP/master.tar.gz" )

						_target_build "$TEMP/${PACKAGE##*/}-master" "$TEMP/package.tar.gz"

						_target_install_tarball "$TEMP/${PACKAGE##*/}/tpm-control" "$TEMP/package.tar.gz"
					fi
				)
				;;
		esac
		:
}

_target_remove_native(){
		PACKAGE="$(tpm_anz "$1")"
		tpm_az "$2"

		tpm_assert tpm_is_root

		tpm_assert tpm_is_command sort
		
		tpm_assert _is_target_db
		tpm_assert _is_target_native_installed "$PACKAGE"

		(
			OLD_PWD="$PWD"
			cd "$TARGET/opt/tpm-store/var/lib/tpm/info"

			for I in */*.control; do
				tpm_source "$I"

				for J in $DEPENDS; do
					[ "$J" = "$PACKAGE" ] && ( cd "$OLD_PWD"; _target_remove_native "${I%.control}" )
				done
			done
		)

		TEMP="$(mktemp_directory)"

		(
			trap "rm -r '$TEMP'" EXIT

			sort -r "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE.list" > "$TEMP/list"

			echo "Removing $PACKAGE"

			while IFS="" read -r FILE; do
				if [ -d "$TARGET$FILE" ]; then
					rmdir "$TARGET$FILE" 2> /dev/null || :
				else
					rm -f "$FILE"
				fi
			done < "$TEMP/list"
		)

		rm "$TARGET/opt/tpm-store/var/lib/tpm/info/$PACKAGE".*
}

_target_build(){
		SRC="$(tpm_anz "$1")"
		OUTPUT="$(tpm_anz "$2")"
		tpm_az "$3"

		tpm_assert tpm_is_root

		tpm_assert tpm_is_command chroot

		_force_prog_colon tar tar
		_force_prog_colon gzip gzip

		tpm_assert _is_target_db

		tpm_source tpm-control

		for I in $DEPENDS $BUILD_DEPENDS; do
			_target_install_package "$I"
		done

		for I in $LIBS; do
			_target_install_package "libdev:$I"
		done

		mkdir -p "$TARGET/tmp"
		TEMP="$(mktemp_directory "$TARGET/tmp/tpm-XXXXXX")"

		(
			trap "rm -r '$TEMP'" EXIT

			INTERNAL_TEMP="/tmp/${TEMP##*/}"

			cp -r "$SRC" "$TEMP/src"

			# Скрипту сборки можно опираться на то, что существует пустая папка под названием $BUILD, которая потом будет автоматически удалена. И что папка с сорцами лежит в $SRC
			mkdir "$TEMP/build"

			# Мы вынуждены патчить ещё и CFLAGS и CXXFLAGS, т. к. cmake игнорирует CPPFLAGS
			PREFIX=/opt/tpm-store DESTDIR="$INTERNAL_TEMP/destdir" SRC="$INTERNAL_TEMP/src" BUILD="$INTERNAL_TEMP/build" CPPFLAGS="$CPPFLAGS -I/opt/tpm-store/include" CFLAGS="$CFLAGS -I/opt/tpm-store/include" CXXFLAGS="$CXXFLAGS -I/opt/tpm-store/include" LDFLAGS="$LDFLAGS -L/opt/tpm-store/lib" chroot "$TARGET" sh -c "cd \"\$SRC\" || exit 1; $INSTALL"

			( cd "$TEMP/destdir"; tar --numeric-owner -cz . ) > "$OUTPUT"
		)
}

_target_init(){
		# Эта функция инициализирует систему для установки туда tpm-пакетов. После инициализации полученная система будет содержать 0 пакетов. tpm в ней не нужен, т. к., возможно, мы и дальше будем манипулировать этой системой снаружи. wget в ней тоже не нужен, т. к. опять-таки, возможно, мы и дальше будем скачивать пакеты снаружи и устанавливать туда

		tpm_az "$1"

		tpm_assert tpm_is_root

		tpm_assert tpm_is_command chroot
		tpm_assert tpm_is_command mktemp

		[ -e "$TARGET/opt/tpm-store" ] && echo "${0##*/}: already initialized" >&2 && exit 1

		TEMP="$(tpm_mktemp_directory)"

		(
			trap "rm -r '$TEMP'" EXIT

			if chroot "$TARGET" cc -v 2> "$TEMP/cc"; then
				while read -r LINE; do
					case "$LINE" in
						"Target: "*)
							ARCH="${LINE#Target: }"
							;;
					esac
					:
				done < "$TEMP/cc"
			else
				CONFIG_GUESS="$(mktemp "$TARGET/tpm-config.guess-XXXXXX")"

				(
					trap "rm '$CONFIG_GUESS'" EXIT

					_download "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD" "$CONFIG_GUESS"

					chroot "$TARGET" sh "${CONFIG_GUESS##*/}" > "$TEMP/arch"

					echo "${0##*/}: warning: config.guess guessed this arch: $(cat "$TEMP/arch"), it may be inaccurate, especially if host and target arch differ" >&2

					ARCH="$(cat "$TEMP/arch")"
				)
			fi
		)

		echo "Initializing"

		mkdir -p "$TARGET/opt/tpm-store/etc"

		# HARD
		cat << EOF > "$TARGET/opt/tpm-store/etc/tpm.conf"
SYSTEM_ARCH="$ARCH"
REPO="http://safinaskar.com/tpm"
EOF

		mkdir -p "$TARGET/opt/tpm-store/var/lib/tpm/info"
}

usage(){
	tpm_az "$1"

	cat << EOF >&2
Usage:
. tpm # as a shell library
...
EOF

	exit 1
}

EAT_TARGET='shift; case "$1" in --root=*) TARGET="${1#--root=}"; shift;; *) TARGET=/;; esac; :'

case "$1" in
	"")
		# OK, somebody use us as a shell library
		;;

	init)
		eval "$EAT_TARGET"
		tpm_uz "$1"

		_target_init
		;;

	install-tarball)
		eval "$EAT_TARGET"
		CONTROL="$(tpm_unz "$1")
		TARBALL="$(tpm_unz "$2")
		tpm_uz "$3"

		_target_install_tarball "$CONTROL" "$TARBALL"
		;;

	install)
		eval "$EAT_TARGET"
		PACKAGE="$(tpm_unz "$1")
		tpm_uz "$2"

		_target_install_package "$PACKAGE"
		;;

	remove)
		eval "$EAT_TARGET"
		PACKAGE="$(tpm_unz "$1")
		tpm_uz "$2"

		_target_remove_native "$PACKAGE"
		;;

	list)
		eval "$EAT_TARGET"
		tpm_uz "$1"

		tpm_assert _is_target_db

		cd "$TARGET/opt/tpm-store/var/lib/tpm/info"

		for I in */*.list; do
			if ! [ -e "$I" ]; then
				exit
			fi

			printf '%s\n' "${I%.list}"
		done
		;;

	build)
		eval "$EAT_TARGET"
		tpm_ueq "$1" "-o"
		OUTPUT="(tpm_unz "$2")"
		tpm_uz "$3"

		_target_build . "$OUTPUT"
		;;

	bootstrap)
		eval "$EAT_TARGET"
		tpm_uz "$1"

		# HARD
		_target_init
		_target_install_package safinaskar/tpm
		;;

	upgrade-tpm)
		eval "$EAT_TARGET"
		tpm_uz "$1"

		# HARD
		tpm_assert tpm_is_root
		_target_remove_native safinaskar/tpm
		_target_install_package safinaskar/tpm
		;;

	shlib)
		echo /opt/tpm-store/bin/tpm
		;;

	*)
		usage
		;;
esac
:
